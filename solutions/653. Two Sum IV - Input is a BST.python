# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
#     def FlatTree(self, root):
#         record = []
#         record.append(root.val)
        
#         if root.left:
#             record += self.FlatTree(root.left)
        
#         if root.right:
#             record += self.FlatTree(root.right)
            
#         return record
        
    def __init__(self):
        self.d={}    
    
    def findTarget(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: bool
        """
        if root:    
            if root.val in self.d:
                return True
            self.d[k-root.val] = root.val
            return self.findTarget(root.left,k) or self.findTarget(root.right,k)  
        
        
#         def inorderTrav(root):
#             if not root:
#                 return []
#             elif not root.left and not root.right:
#                 return [root.val]
#             else:
#                 return inorderTrav(root.left) + [root.val] + inorderTrav(root.right)    
            
#         arr = inorderTrav(root)
        
#         l = 0
#         r = len(arr)-1
#         while l < r:
